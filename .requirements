Entendi üëç. Voc√™ quer um **prompt para o TRAE** (provavelmente uma IA de gera√ß√£o de c√≥digo/app) que descreva toda a sua aplica√ß√£o em Flutter 3, com autentica√ß√£o biom√©trica, integra√ß√£o com banco e controle de v√°lvula via Tasmota.

Aqui est√° um prompt detalhado que voc√™ pode usar direto no TRAE:

---

## Prompt para TRAE

Crie uma aplica√ß√£o mobile em **Flutter 3** com as seguintes especifica√ß√µes:

### Autentica√ß√£o

* Login autom√°tico via **biometria** (Face ID, digital ou m√©todo padr√£o do Android).
* Usu√°rios cadastrados na tabela `usuario` do banco MySQL j√° existente.

### Funcionalidades principais

1. **Tela de Login**

   * Autentica√ß√£o biom√©trica.
   * Caso biometria n√£o esteja dispon√≠vel, permitir login manual com usu√°rio/senha.

2. **Tela Principal**

   * Campo para inserir o **c√≥digo da carca√ßa** (etiqueta com 6 n√∫meros).
   * Bot√£o de busca que consulta a tabela `carcaca` no banco.
   * Valida√ß√£o: verificar se a matriz registrada para a m√°quina atual (configura√ß√£o local) corresponde √† matriz da carca√ßa.

     * Se diferente ‚Üí mostrar mensagem **‚ÄúM√°quina errada‚Äù** em destaque.

3. **Tela de Configura√ß√£o da M√°quina**

   * Permitir registrar qual **matriz** est√° aceita para a m√°quina naquele momento (vinculada ao usu√°rio/dispositivo).
   * Usar tabela `matriz` para buscar e registrar.

4. **Fluxo de Inje√ß√£o de Ar**
    Ao abrir a tela de inje√ß√£o de ar o sistema vai exibir um tela com um campo de input para um numero de 6 digitos, ao informar os numeros e clicar em pesquisar o sistema buscar no endpoint `/carcaca/{codigo}` para verificar se a carca√ßa existe. se existir vai trazer as informa√ß√£os da carcaca, dando ok seguira as informa√ß√µes abaixo
   * Quando a carca√ßa for validada, mostrar detalhes da matriz vinculada ao pneu, vai validar se a matriz da carca√ßa bate com a matriz da m√°quina, se nao bater mostrar mensagem **‚ÄúM√°quina errada‚Äù** em destaque. se tudo certo seguir
   * Exibir bot√£o **‚ÄúInjetar ar‚Äù**.
   * Ao clicar:

     * Enviar comando REST HTTP para o **m√≥dulo Sonoff Tasmota** (`cm?cmnd=Power%20On`) para ligar a energia da v√°lvula solenoide.
     * Abrir nova tela com **timer**.

       * O tempo vir√° da **regra** associada ao pneu (tabela `regra.tempo`).
       * Exibir contador regressivo.

5. **Finaliza√ß√£o**

   * Quando o tempo terminar:

     * Mostrar mensagem **‚ÄúPronto‚Äù** piscando.
     * Enviar comando REST para o Sonoff Tasmota (`cm?cmnd=Power%20Off`) desligando a v√°lvula.

### Banco de Dados (MySQL j√° existente)

* Utilizar as tabelas j√° definidas (`carcaca`, `matriz`, `regra`, `usuario`, etc.).
* O app deve se conectar a uma API (em Node, Spring Boot ou outra linguagem) que j√° exp√µe esses dados via REST.

### Requisitos t√©cnicos

* Flutter 3 (null safety).
* State management: **BLoC ou Riverpod**.
* Integra√ß√£o biom√©trica (package: `local_auth`).
* Integra√ß√£o com API REST para comunica√ß√£o com banco e Sonoff Tasmota.
* Estrutura seguindo **Clean Architecture**.
* Configura√ß√µes salvas localmente no dispositivo com `shared_preferences` (para a matriz da m√°quina).
