import 'dart:developer' as developer;
import 'package:flutter/foundation.dart';

/// Logger customizado que exibe logs tanto no developer.log quanto no terminal
/// √ötil para desenvolvimento quando queremos ver os logs no terminal
class AppLogger {
  static const String _defaultName = 'AppLogger';
  
  /// Log de informa√ß√£o
  static void info(String message, {String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('‚ÑπÔ∏è $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] ‚ÑπÔ∏è $message');
    }
  }
  
  /// Log de sucesso
  static void success(String message, {String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('‚úÖ $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] ‚úÖ $message');
    }
  }
  
  /// Log de erro
  static void error(String message, {String? name, Object? error, StackTrace? stackTrace}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('‚ùå $message', name: logName, error: error, stackTrace: stackTrace);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] ‚ùå $message');
      if (error != null) {
        print('[$logName] üí• Error: $error');
      }
      if (stackTrace != null) {
        print('[$logName] üìç StackTrace: $stackTrace');
      }
    }
  }
  
  /// Log de warning
  static void warning(String message, {String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('‚ö†Ô∏è $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] ‚ö†Ô∏è $message');
    }
  }
  
  /// Log de debug
  static void debug(String message, {String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('üêõ $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] üêõ $message');
    }
  }
  
  /// Log de rede/API
  static void network(String message, {String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('üåê $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] üåê $message');
    }
  }
  
  /// Log de dados/resposta
  static void data(String message, {String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('üìä $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] üìä $message');
    }
  }
  
  /// Log de UI/interface
  static void ui(String message, {String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('üé® $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] üé® $message');
    }
  }
  
  /// Log de cache
  static void cache(String message, {String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('üíæ $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] üíæ $message');
    }
  }
  
  /// Log de autentica√ß√£o
  static void auth(String message, {String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('üîê $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] üîê $message');
    }
  }
  
  /// Log personalizado com emoji
  static void custom(String message, {String emoji = 'üìù', String? name}) {
    final logName = name ?? _defaultName;
    
    // Log no developer.log (aparece no DevTools)
    developer.log('$emoji $message', name: logName);
    
    // Log no terminal (aparece no console)
    if (kDebugMode) {
      print('[$logName] $emoji $message');
    }
  }
}