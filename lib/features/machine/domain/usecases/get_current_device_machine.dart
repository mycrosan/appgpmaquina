import 'package:dartz/dartz.dart';
import '../../../../core/errors/failures.dart';
import '../../../../core/services/device_info_service.dart';
import '../entities/registro_maquina.dart';
import '../repositories/registro_maquina_repository.dart';
import 'dart:developer' as developer;

/// Use case para obter a m√°quina atual configurada para este dispositivo
class GetCurrentDeviceMachine {
  final RegistroMaquinaRepository repository;
  final DeviceInfoService deviceInfoService;

  GetCurrentDeviceMachine({
    required this.repository,
    required this.deviceInfoService,
  });

  /// Obt√©m a m√°quina atual configurada para este dispositivo
  ///
  /// Retorna a √∫ltima m√°quina configurada para o device ID atual,
  /// ou null se nenhuma m√°quina foi configurada ainda
  Future<Either<Failure, RegistroMaquina?>> call() async {
    try {
      developer.log(
        'üîç Iniciando busca da m√°quina atual do dispositivo',
        name: 'GetCurrentDeviceMachine',
      );

      // 1. Obter o device ID
      final deviceId = await deviceInfoService.getDeviceId();
      developer.log(
        'üì± Device ID obtido: $deviceId',
        name: 'GetCurrentDeviceMachine',
      );

      // 2. Buscar todas as m√°quinas
      final result = await repository.getAllMaquinas();

      return result.fold(
        (failure) {
          developer.log(
            '‚ùå Erro ao buscar m√°quinas: $failure',
            name: 'GetCurrentDeviceMachine',
          );
          return Left(failure);
        },
        (maquinas) {
          developer.log(
            'üìã Total de m√°quinas encontradas: ${maquinas.length}',
            name: 'GetCurrentDeviceMachine',
          );

          // 3. Filtrar m√°quinas que foram configuradas para este dispositivo
          // Assumindo que existe um campo deviceId na entidade Maquina
          // ou que podemos identificar atrav√©s de algum outro campo

          // Por enquanto, vamos retornar a primeira m√°quina como fallback
          // TODO: Implementar l√≥gica espec√≠fica baseada em como as m√°quinas
          // s√£o associadas aos dispositivos no seu sistema

          if (maquinas.isEmpty) {
            developer.log(
              '‚ÑπÔ∏è Nenhuma m√°quina encontrada',
              name: 'GetCurrentDeviceMachine',
            );
            return const Right(null);
          }

          // Retorna a primeira m√°quina por enquanto
          // Esta l√≥gica deve ser ajustada conforme a regra de neg√≥cio
          final currentMachine = maquinas.first;
          developer.log(
            '‚úÖ M√°quina atual encontrada: ${currentMachine.nome} (ID: ${currentMachine.id})',
            name: 'GetCurrentDeviceMachine',
          );

          return Right(currentMachine);
        },
      );
    } catch (e) {
      developer.log(
        '‚ùå Erro inesperado ao buscar m√°quina atual: $e',
        name: 'GetCurrentDeviceMachine',
      );
      return Left(ServerFailure(message: 'Erro ao buscar m√°quina atual: $e'));
    }
  }
}