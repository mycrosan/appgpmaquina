import 'package:dartz/dartz.dart';
import '../../../../core/errors/failures.dart';
import '../../../../core/services/device_info_service.dart';
import '../entities/registro_maquina.dart';
import '../repositories/registro_maquina_repository.dart';
import 'dart:developer' as developer;

/// Use case para obter a m√°quina atual configurada para este dispositivo
class GetCurrentDeviceMachine {
  final RegistroMaquinaRepository repository;
  final DeviceInfoService deviceInfoService;

  GetCurrentDeviceMachine({
    required this.repository,
    required this.deviceInfoService,
  });

  /// Obt√©m a m√°quina atual configurada para este dispositivo
  ///
  /// Busca atrav√©s das configura√ß√µes de m√°quina para encontrar
  /// qual m√°quina est√° associada ao dispositivo atual
  Future<Either<Failure, RegistroMaquina?>> call() async {
    try {
      developer.log(
        'üîç Iniciando busca da m√°quina atual do dispositivo',
        name: 'GetCurrentDeviceMachine',
      );

      // 1. Obter o device ID
      final deviceId = await deviceInfoService.getDeviceId();
      developer.log(
        'üì± Device ID obtido: $deviceId',
        name: 'GetCurrentDeviceMachine',
      );

      // 2. Buscar todas as m√°quinas dispon√≠veis
      final maquinasResult = await repository.getAllMaquinas();

      return maquinasResult.fold(
        (failure) {
          developer.log(
            '‚ùå Erro ao buscar m√°quinas: $failure',
            name: 'GetCurrentDeviceMachine',
          );
          return Left(failure);
        },
        (maquinas) {
          developer.log(
            'üìã Total de m√°quinas encontradas: ${maquinas.length}',
            name: 'GetCurrentDeviceMachine',
          );

          if (maquinas.isEmpty) {
            developer.log(
              '‚ö†Ô∏è Nenhuma m√°quina encontrada no sistema',
              name: 'GetCurrentDeviceMachine',
            );
            return const Right(null);
          }

          // 3. Tentar encontrar uma m√°quina atrav√©s de configura√ß√µes existentes
          // Procurar por m√°quinas que tenham configura√ß√µes ativas para este dispositivo
          for (final maquina in maquinas) {
            if (maquina.id != null) {
              // Verificar se esta m√°quina tem configura√ß√µes para este dispositivo
              // Isso seria feito atrav√©s de um m√©todo no reposit√≥rio que busca
              // configura√ß√µes por registroMaquinaId e deviceId
              
              // Por enquanto, vamos usar uma heur√≠stica baseada no nome/descri√ß√£o
              // que pode conter informa√ß√µes do dispositivo
              if (_isMachineAssociatedWithDevice(maquina, deviceId)) {
                developer.log(
                  '‚úÖ M√°quina encontrada atrav√©s de associa√ß√£o: ${maquina.nome}',
                  name: 'GetCurrentDeviceMachine',
                );
                return Right(maquina);
              }
            }
          }

          // 4. Se n√£o encontrou atrav√©s de configura√ß√µes, aplicar l√≥gica de prioridade
          final prioritizedMachine = _selectMachineByPriority(maquinas);
          
          if (prioritizedMachine != null) {
            developer.log(
              'üìå M√°quina selecionada por prioridade: ${prioritizedMachine.nome}',
              name: 'GetCurrentDeviceMachine',
            );
            return Right(prioritizedMachine);
          }

          developer.log(
            '‚ö†Ô∏è Nenhuma m√°quina adequada encontrada',
            name: 'GetCurrentDeviceMachine',
          );
          return const Right(null);
        },
      );
    } catch (e) {
      developer.log(
        '‚ùå Erro inesperado ao buscar m√°quina do dispositivo: $e',
        name: 'GetCurrentDeviceMachine',
      );
      return Left(DeviceFailure(message: 'Erro ao buscar m√°quina: $e'));
    }
  }

  /// Verifica se uma m√°quina est√° associada ao dispositivo
  /// atrav√©s de informa√ß√µes na descri√ß√£o, n√∫mero de s√©rie, etc.
  bool _isMachineAssociatedWithDevice(RegistroMaquina maquina, String deviceId) {
    // Verificar se o deviceId est√° presente em campos da m√°quina
    final searchFields = [
      maquina.numeroSerie,
      maquina.descricao,
      maquina.observacoes,
    ];

    for (final field in searchFields) {
      if (field != null && field.contains(deviceId)) {
        return true;
      }
    }

    return false;
  }

  /// Seleciona uma m√°quina baseada em crit√©rios de prioridade
  RegistroMaquina? _selectMachineByPriority(List<RegistroMaquina> maquinas) {
    // 1. Priorizar m√°quinas ativas e operacionais
    final operationalMachines = maquinas.where((m) => m.isOperational).toList();
    
    if (operationalMachines.isNotEmpty) {
      // 2. Priorizar m√°quinas com informa√ß√µes mais completas
      operationalMachines.sort((a, b) {
        int scoreA = _calculateMachineScore(a);
        int scoreB = _calculateMachineScore(b);
        return scoreB.compareTo(scoreA); // Ordem decrescente
      });
      
      return operationalMachines.first;
    }

    // 3. Se n√£o h√° m√°quinas operacionais, retornar a primeira ativa
    final activeMachines = maquinas.where((m) => m.ativo).toList();
    if (activeMachines.isNotEmpty) {
      return activeMachines.first;
    }

    // 4. Como √∫ltimo recurso, retornar a primeira m√°quina dispon√≠vel
    return maquinas.isNotEmpty ? maquinas.first : null;
  }

  /// Calcula uma pontua√ß√£o para a m√°quina baseada na completude das informa√ß√µes
  int _calculateMachineScore(RegistroMaquina maquina) {
    int score = 0;
    
    // Pontos por informa√ß√µes preenchidas
    if (maquina.numeroSerie?.isNotEmpty == true) score += 2;
    if (maquina.modelo?.isNotEmpty == true) score += 2;
    if (maquina.fabricante?.isNotEmpty == true) score += 1;
    if (maquina.localizacao?.isNotEmpty == true) score += 1;
    if (maquina.responsavel?.isNotEmpty == true) score += 1;
    
    // Pontos por status
    if (maquina.status == 'ATIVA') score += 3;
    if (maquina.ativo) score += 2;
    
    // Pontos por data de cria√ß√£o (m√°quinas mais recentes t√™m prioridade)
    if (maquina.criadoEm != null) {
      final daysSinceCreation = DateTime.now().difference(maquina.criadoEm!).inDays;
      if (daysSinceCreation < 30) score += 2; // M√°quinas criadas nos √∫ltimos 30 dias
      else if (daysSinceCreation < 90) score += 1; // M√°quinas criadas nos √∫ltimos 90 dias
    }
    
    return score;
  }
}